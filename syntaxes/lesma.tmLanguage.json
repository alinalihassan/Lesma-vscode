{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Lesma",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#types"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#invalid"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.lesma",
					"match": "\\b(if|else|while|for|in|switch|case|default|break|fallthrough|return|pass|defer)\\b"
				},
				{
					"name": "keyword.other.lesma",
					"match": "\\b(const|class|struct|enum|type|def|extern|operator)\\b"
				},
				{
					"name": "variable.language.lesma",
					"match": "\\b(self|super)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"comment": "Needs to come before assignment operator so this match has precedence",
					"name": "keyword.operator.comparison.lesma",
					"match": "==|!="
				},				
				{
					"name": "keyword.operator.range.lesma",
					"match": "\\.\\."
				},
				{
					"comment": "Needs to come before subtract operator",
					"name": "keyword.operator.arrow.lesma",
					"match": "->"
				},
				{
					"name": "keyword.operator.assignment.lesma",
					"match": "="
				},
				{
					"name": "keyword.operator.expression.lesma",
					"match": "\\b(and|or|xor|not|is|as)\\b"
				},
				{
					"name": "keyword.operator.arithmetic.lesma",
					"match": "\\+|\\-|\\*|\\^|\\/|\\%"
				},
				{
					"name": "keyword.operator.relational.lesma",
					"match": ">=|<=|>|<"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.lesma",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.lesma",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.lesma",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.lesma",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.other.lesma",
					"match": "[+-]?([0][obx])?[0-9]+"
				},
				{
					"name": "constant.numeric.float.lesma",
					"match": "[+-]?([0-9]*[.])?[0-9]+"
				},
				{
					"name": "constant.numeric.dec.lesma",
					"match": "[0-9]+"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"comment": "Built-in Types",
					"name": "support.type.lesma",
					"match": "\\b(bool|str|u?int\\d*|float|double|void|any|func|list|tuple)\\b"
				},
				{
					"comment": "Type annotation",
					"name": "support.function.lesma",
					"match": "(?<=:\\s|->\\s)[a-zA-Z0-9_]+"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"comment": "Catch the function call and function definition",
					"name": "support.function.lesma",
					"match": "(?=[a-zA-Z0-9_]+\\()[a-zA-Z0-9_]+"
				},
				{
					"comment": "Class/Struct declaration",
					"name": "support.function.lesma",
					"match": "(?<=class\\s|struct\\s|enum\\s)[a-zA-Z0-9_]+"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"comment": "Single line comment",
					"name": "comment.line.lesma",
					"begin": "#",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.lesma"
						}
					},
					"end": "(?=$)"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"comment": "Boolean constants",
					"name": "constant.language.boolean.lesma",
					"match": "\\b(true|false)\\b"
				},
				{
					"comment": "Arithmetic constants",
					"name": "constant.language.float.lesma",
					"match": "\\b(inf)\\b"
				}
			]
		},
		"invalid": {
			"patterns": [
				{
					"comment": "Semicolon as invalid",
					"name": "invalid.illegal.lesma",
					"match": ";"
				}
			]
		}
	},
	"scopeName": "source.lesma"
}